
class Solution {
public:
 int jump(vector<int>& nums) {
 int n = nums.size();
 if (n == 1) return 0; // If there's only one element, no jumps are needed
 int jumps = 0;
 int currentEnd = 0;
 int farthest = 0; // Farthest index reachable overall
 for (int i = 0; i < n - 1; i++) {
 // Update the farthest index reachable from the current position
 farthest = max(farthest, i + nums[i]);
 // If we reach the end of the current range
 if (i == currentEnd) {
 jumps++; // Increment jump count
 currentEnd = farthest;
 if (currentEnd >= n - 1) break;
 }
 }
 return jumps;
 }
};


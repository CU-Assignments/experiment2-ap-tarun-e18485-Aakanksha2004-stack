//question 1 
class Solution {
public:
 int jump(vector<int>& nums) {
 int n = nums.size();
 if (n == 1) return 0; // If there's only one element, no jumps are needed
 int jumps = 0;
 int currentEnd = 0;
 int farthest = 0; // Farthest index reachable overall
 for (int i = 0; i < n - 1; i++) {
 // Update the farthest index reachable from the current position
 farthest = max(farthest, i + nums[i]);
 // If we reach the end of the current range
 if (i == currentEnd) {
 jumps++; // Increment jump count
 currentEnd = farthest;
 if (currentEnd >= n - 1) break;
 }
 }
 return jumps;
 }
};

// question 2 SimplifyPath
class Solution {
public:
string simplifyPath(string path) {
string ans;
istringstream iss(path);
vector<string> stack;
for (string dir; getline(iss, dir, '/');) {
if (dir.empty() || dir == ".")
continue;
if (dir == "..") {
if (!stack.empty())
stack.pop_back();
} else {
stack.push_back(dir);
} }
for (const string& s : stack)
ans += "/" + s;
return ans.empty() ? "/" : ans;
}
};

